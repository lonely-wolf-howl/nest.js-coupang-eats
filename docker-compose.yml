services:
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
      target: development
    command: pnpm run start:dev gateway
    env_file:
      - ./apps/gateway/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      target: development
    command: pnpm run start:dev user
    depends_on:
      postgres_user:
        condition: service_healthy
    env_file:
      - ./apps/user/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  postgres_user:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6001:5432'
    volumes:
      - ./postgres/user:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  product:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
      target: development
    command: pnpm run start:dev product
    depends_on:
      postgres_product:
        condition: service_healthy
    env_file:
      - ./apps/product/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  postgres_product:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6002:5432'
    volumes:
      - ./postgres/product:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  order:
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      target: development
    command: pnpm run start:dev order
    depends_on:
      mongo_order:
        condition: service_healthy
    env_file:
      - ./apps/order/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  mongo_order:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6003:27017'
    volumes:
      - ./mongo/order:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  payment_command:
    build:
      context: .
      dockerfile: apps/payment-command/Dockerfile
      target: development
    command: pnpm run start:dev payment-command
    depends_on:
      mongo_payment_command:
        condition: service_healthy
    env_file:
      - apps/payment-command/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  postgres_payment_command:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6004:5432'
    volumes:
      - ./postgres/payment_command:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  mongo_payment_command:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6006:27017'
    volumes:
      - ./mongo/payment_command:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  payment_query:
    build:
      context: .
      dockerfile: apps/payment-query/Dockerfile
      target: development
    command: pnpm run start:dev payment-query
    depends_on:
      mongo_payment_query:
        condition: service_healthy
    env_file:
      - apps/payment-query/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  mongo_payment_query:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6007:27017'
    volumes:
      - ./mongo/payment_query:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: pnpm run start:dev notification
    depends_on:
      mongo_notification:
        condition: service_healthy
    env_file:
      - ./apps/notification/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  mongo_notification:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6005:27017'
    volumes:
      - ./mongo/notification:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - '9092:9092'
      - '29092:29092'
